(()=>{var __webpack_modules__={440:(e,t,o)=>{const{MessageEmbed:r,WebhookClient:s}=o(591);const i=1024;e.exports.send=(e,t,o,r,i,n,c,a)=>new Promise(((l,u)=>{let g;console.log("Preparing Webhook...");try{if(!e||!t){throw new Error("ID or token is missing")}g=new s({id:e,token:t});if(a){if(isNaN(a)){throw new Error("threadId is not a number")}console.log("Found thread ID");g.send({embeds:[createEmbed(o,r,i,n,c)],threadId:a}).then((()=>{console.log("Successfully sent the message!");l()}),u)}else{g.send({embeds:[createEmbed(o,r,i,n,c)]}).then((()=>{console.log("Successfully sent the message!");l()}),u)}}catch(e){console.log("Error creating Webhook");u(e.message)}}));function createEmbed(e,t,o,s,i){console.log("Constructing Embed...");console.log("Commits :");const n=s[0];console.log({latest:n});if(!n){console.log("No commits, skipping...");return}if(!n.author){n.author={username:"unknown",avatar:null}}else{n.author.avatar=`https://i.imgur.com/yZcbfqm.png?size=32`}const c=getChangeLog(e,t,s,i);return(new r).setColor(47906).setAuthor({name:`${i} ${i===1?"commit was":"commits were"} added to ${c[0]}/${c[1]}`,iconURL:n.author.avatar}).setDescription(`${c[2]}`).setTimestamp(Date.parse(n.timestamp)).setFooter({text:`⚡ Edited by SALife @Developers`})}function getChangeLog(e,t,o,r){let s="";let n=false;for(const r in o){const s=o[r];if(s.message.startsWith("%")){n=true;t=obfuscateMessage(t);e=obfuscateMessage(e);break}}s+=`**🔄 Recent Changes:**\n`;for(const e in o){if(e>32){s+=`\n**+${r-e}** more changes...\n`;break}const t=o[e];const c=t.id.substring(0,6);let a=t.message;if(a.startsWith("%")){a=a.substring(1)}if(n){a=obfuscateMessage(a);a=a.replace(/ /g,"▌")}else{a=a.replace(/^(fix|fixed|fixes|bug|bugfix|bugfixes|bugfixing|bugfixes|bugfixing):/i,"🔧 ");a=a.replace(/^(feat|add|added|adds|feature|features|featureing|featureing|featureing|featureing):/i,"✨ ");a=a.replace(/^(remove|removed|removeing|removeing|removeing|removeing):/i,"🗑️ ");a=a.replace(/^(update|updated|updateing|updateing|updateing|updateing):/i,"📝 ");a=a.replace(/^(security|secure):/i,"🔒 ");a=a.replace(/^(bug|bugfix):/i,"🐛 ");a=a.replace(/^(refactor|refactored):/i,"🔄 ");a=a.replace(/^(docs|documentation):/i,"📚 ");a=a.replace(/^(test|testing):/i,"🧪 ");a=a.replace(/^(style|styling):/i,"🎨 ");a=a.replace(/^(chore|choreography):/i,"🧹 ");a=a.replace(/^(perf|performance):/i,"🚀 ");a=a.replace(/^(revert|reverted):/i,"⏪ ");a=a.replace(/^(script|scripts|scripting|scripting|scripting|scripting):/i,"💻 ");a=a.replace(/^(config|configuration|configuring|configuring|configuring|configuring):/i,"🔧 ");a=a.replace(/^(garage|vehicle|vehicles):/i,"🚗 ");a=a.replace(/^(job|jobs):/i,"💼 ");a=a.replace(/^(ps-housing|house|property|properties|property|properties):/i,"🏠 ")}if(a.length>i){a=a.substring(0,i)+"..."}if(n){s+=`\`${c}\` ${a}\n`}else{s+=`\`${c}\` ${a}\n`}}return[e,t,s]}function obfuscateMessage(e){const t=["▄","▅","▇","█","▉"];let o="";for(let r=0;r<e.length;r++){const s=e.charAt(r);if(s===" "){o+=" "}else{const e=Math.floor(Math.random()*t.length);o+=t[e]}}return o}},365:module=>{module.exports=eval("require")("@actions/core")},189:module=>{module.exports=eval("require")("@actions/github")},591:module=>{module.exports=eval("require")("discord.js")}};var __webpack_module_cache__={};function __nccwpck_require__(e){var t=__webpack_module_cache__[e];if(t!==undefined){return t.exports}var o=__webpack_module_cache__[e]={exports:{}};var r=true;try{__webpack_modules__[e](o,o.exports,__nccwpck_require__);r=false}finally{if(r)delete __webpack_module_cache__[e]}return o.exports}if(typeof __nccwpck_require__!=="undefined")__nccwpck_require__.ab=__dirname+"/";var __webpack_exports__={};const core=__nccwpck_require__(365);const github=__nccwpck_require__(189);const webhook=__nccwpck_require__(440);function run(){const e=core.getInput("id");const t=core.getInput("token");const o=core.getInput("threadId");const r=github.context.payload;const s=r.repository.name;const i=r.commits;const n=i.length;const c=r.ref.split("/")[r.ref.split("/").length-1];console.log("Received payload.");console.log(`Received ${n} commits...`);if(!i[0]){console.log("No commits, skipping...");return}webhook.send(e,t,s,c,r.compare,i,n,o).catch((e=>core.setFailed(e.message)))}try{run()}catch(e){core.setFailed(e.message)}module.exports=__webpack_exports__})();