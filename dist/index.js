(()=>{var __webpack_modules__={689:(e,t,o)=>{const{MessageEmbed:s,WebhookClient:r}=o(852);const n=40;e.exports.send=(e,t,o,s,n,a,c,_)=>new Promise(((i,l)=>{let u;console.log("Preparing Webhook...");try{if(!e||!t){throw new Error("ID or token is missing")}u=new r({id:e,token:t});if(_){if(isNaN(_)){throw new Error("threadId is not a number")}console.log("Found thread ID");u.send({embeds:[createEmbed(o,s,n,a,c)],threadId:_}).then((()=>{console.log("Successfully sent the message!");i()}),l)}else{u.send({embeds:[createEmbed(o,s,n,a,c)]}).then((()=>{console.log("Successfully sent the message!");i()}),l)}}catch(e){console.log("Error creating Webhook");l(e.message)}}));function createEmbed(e,t,o,r,n){console.log("Constructing Embed...");console.log("Commits :");const a=r[0];console.log({latest:a});if(!a){console.log("No commits, skipping...");return}if(!a.author){a.author={username:"unknown",avatar:null}}else{a.author.avatar=`https://github.com/${a.author.username}.png?size=32`}const c=getChangeLog(t,r,n);return(new s).setColor(47906).setURL(o).setAuthor({name:`${n} ${n===1?"commit was":"commits were"} added to ${c[0]}`,iconURL:a.author.avatar}).setDescription(`${c[1]}`).setTimestamp(Date.parse(a.timestamp)).setFooter({text:`⚡ Edited by @${a.author.username}`})}function getChangeLog(e,t,o){let s="";for(const r in t){if(r>7){s+=`+ ${o-r} more...\n`;break}const a=t[r];const c=a.id.substring(0,6);let _=a.message;if(_.startsWith("%")){_=obfuscateMessage(_);e=obfuscateMessage(e)}else if(_.length>n){_=_.substring(0,n)+"..."}_=_.replace(/ /g,"▌");s+=`[${c}](${a.url}) — ${_}\n`}return s}function obfuscateMessage(e){const t=["▍","▋","▊","▄","▅","▇","█","▆","▉"];let o="";for(let s=0;s<e.length;s++){const r=e.charAt(s);if(s<t.length){o+=e.charAt(s).replace(/./,t[s])}else{o+=r}}return o}},539:module=>{module.exports=eval("require")("@actions/core")},378:module=>{module.exports=eval("require")("@actions/github")},852:module=>{module.exports=eval("require")("discord.js")}};var __webpack_module_cache__={};function __nccwpck_require__(e){var t=__webpack_module_cache__[e];if(t!==undefined){return t.exports}var o=__webpack_module_cache__[e]={exports:{}};var s=true;try{__webpack_modules__[e](o,o.exports,__nccwpck_require__);s=false}finally{if(s)delete __webpack_module_cache__[e]}return o.exports}if(typeof __nccwpck_require__!=="undefined")__nccwpck_require__.ab=__dirname+"/";var __webpack_exports__={};(()=>{const e=__nccwpck_require__(539);const t=__nccwpck_require__(378);const o=__nccwpck_require__(689);function run(){const s=e.getInput("id");const r=e.getInput("token");const n=e.getInput("threadId");const a=t.context.payload;const c=a.repository.full_name;const _=a.commits;const i=_.length;const l=a.ref.split("/")[a.ref.split("/").length-1];console.log("Received payload.");console.log(`Received ${i} commits...`);if(!_[0]){console.log("No commits, skipping...");return}o.send(s,r,c,l,a.compare,_,i,n).catch((t=>e.setFailed(t.message)))}try{run()}catch(t){e.setFailed(t.message)}})();module.exports=__webpack_exports__})();